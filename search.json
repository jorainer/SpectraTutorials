[{"path":"https://jorainer.github.io/SpectraTutorials/Abstract-EuroBioc2020.html","id":null,"dir":"","previous_headings":"","what":"Abstract","title":"Abstract","text":"Mass spectrometry (MS) data key technology modern proteomics metabolomics experiments. Due continuous improvements MS instrumentation, generated data can easily become large. Also, different additional resources MS data exist, spectra libraries databases, specific file formats sometimes support manipulations original data. Learning experiences r Biocpkg(\"MSnbase\") Bioconductor package developed novel infrastructure handle MS spectral data R, r Biocpkg(\"Spectra\") package. package implements clear separation user functionality code provide, store import mass spectrometry data. Different backends can hence used enable access data various data resources designed specifically large MS data sets. Data manipulations default directly applied data cached lazy processing queue allows analyses also read-data representations. workshop shows expandability new infrastructure enable seamless integration analysis MS data variety input formats illustrated simple matching experimental MS2 spectra public spectral database export data format commonly used exchange MS2 data.","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/articles/Spectra-matching-with-MetaboAnnotation.html","id":"introduction","dir":"Articles","previous_headings":"Overview","what":"Introduction","title":"MS/MS Spectra Matching with the `MetaboAnnotation` Package","text":"Spectra package provides functionality required annotation identification workflows untargeted LC-MS/MS data, , flexible customizable, might cumbersome beginners analysts accustomed R. fill gap developed MetaboAnnotation package builds upon Spectra provides functions annotation LC-MS LC-MS/MS data sets tailored towards less experienced R user (Rainer et al. 2022).","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/Spectra-matching-with-MetaboAnnotation.html","id":"convenient-spectra-matching-using-metaboannotation","dir":"Articles","previous_headings":"Overview","what":"Convenient spectra matching using MetaboAnnotation","title":"MS/MS Spectra Matching with the `MetaboAnnotation` Package","text":"example use case match experimental MS2 spectra DDA experiment pesticide mix reference spectra MassBank. load experimental data file distributed via msdata R package. next restrict data set MS2 spectra addition clean spectra removing peaks spectrum intensity lower 5% largest peak intensity spectrum. Finally, single-peak spectra removed. leads data set consisting 2451 spectra. next connect MassBank database (running within docker image) create Spectra object representing data. Alternatively, MySQL database system available tutorial can run within docker, SQLite database version MassBank data (format required MsBackendMassbankSql available . downloading database MassbankSql-2021-03.db current R workspace, resource can loaded : now directly calculate similarities 2451 experimental (query) MS2 spectra 86576 MassBank reference (target) spectra using compareSpectra method, computationally intense similarity score calculated query target spectrum. alternative use matchSpectra function MetaboAnnotation package allows restrict similarity calculations query target spectra similar m/z precursor ion similar retention time. create CompareSpectraParam object setting parameter requirePrecursor = TRUE (restrict similarity calculations query target spectra similar precursor m/z) ppm = 10 (m/z difference query target precursor within 10 ppm). Parameter THRESHFUN enables define threshold function defines spectra considered matching. function used MS2 spectra similarity (calculated default dotproduct function) larger equal 0.8 considered matching. next call matchSpectra parameter object pass pest mbank query target Spectra, respectively. takes approximately 1 minute complete, tremendously fast, still much faster pairwise comparison query target spectra . result get MatchedSpectra object contains query target spectra well matching result (.e. information query spectrum matches target spectrum based similarity score). can use query target functions access query target Spectra objects matches extract matching information. display first 6 rows matrix. Functions whichQuery whichTarget return (unique) indices query target spectra matched. can see query spectra (29 2451 spectra) matched. part large proportion spectra MassBank precursor m/z available requirePrecursor = TRUE considered similarity calculation. Setting requirePrecursor = FALSE calculate similarity spectra (even missing precursor information) calculations can take several hours. MatchedSpectra object inherits much functionality Spectra object. spectraVariables returns example available spectra variables, query well target Spectra. variable names latter prefixed target_ discriminate variable names query. can access spectra individual variables using $ variable name, multiple variables spectraData function. extract retention time, precursor m/z query spectrum, precursor m/z target spectrum well similarity score object using spectraData function. returned DataFrame contains matching information full data set, .e. query spectrum hence, returns NA values query spectra matched target spectrum. Note also query spectra matching multiple target spectra represented multiple rows (one matching target spectrum). ’re interested query spectra match found thus subset MatchedSpectra query spectra matching target spectrum. Subsetting MatchedSpectra always relative query, .e. subsetting object index 4 restrict object matching results 4th query spectrum. now extract matching information subsetting: can also return compound names matching spectra. matchSpectra enables thus perform convenient spectra matching MS data represented Spectra objects. result, MatchedSpectra object returned , addition matching results, contains also query target spectra. Pre-filtering spectra prior actual spectra similarity calculation can reduce running time matchSpectra call might also miss potential matches. Note addition precursor m/z-based pre-filter also retention time pre-filtering available (see ?matchSpectra information). Also, advanced matching approach available MatchForwardReverseParam calculates addition forward score also reverse similarity match.","code":"library(Spectra) library(pander)  #' Load the pesticide mix data fl <- system.file(\"TripleTOF-SWATH\", \"PestMix1_DDA.mzML\", package = \"msdata\") pest <- Spectra(fl) #' restrict to MS2 data and remove intensities with intensity lower 5% pest <- filterMsLevel(pest, msLevel = 2L)  #' Remove peaks with an intensity below 5% or the spectra's BPC low_int <- function(x, ...) {     x > max(x, na.rm = TRUE) * 0.05 } pest <- filterIntensity(pest, intensity = low_int)  #' Remove peaks with a single peak pest <- pest[lengths(pest) > 1] library(RMariaDB) library(MsBackendMassbank)  #' Connect to the MassBank MySQL database con <- dbConnect(MariaDB(), user = \"massbank\", dbname = \"MassBank\",                  host = \"localhost\", pass = \"massbank\") mbank <- Spectra(con, source = MsBackendMassbankSql()) ## Alternative to the MySQL server - assuming the SQLite database was ## stored to the R working directory. library(RSQLite) con <- dbConnect(SQLite(), \"MassbankSql-2021-03.db\") mbank <- Spectra(con, source = MsBackendMassbankSql()) library(MetaboAnnotation) prm <- CompareSpectraParam(ppm = 10, requirePrecursor = TRUE,                            THRESHFUN = function(x) which(x >= 0.8)) mtch <- matchSpectra(pest, mbank, param = prm) mtch ## Object of class MatchedSpectra  ## Total number of matches: 78  ## Number of query objects: 2451 (29 matched) ## Number of target objects: 86576 (47 matched) head(matches(mtch)) ##   query_idx target_idx     score ## 1       163      31941 0.9264249 ## 2       163      32022 0.9264249 ## 3       163      32214 0.9264249 ## 4       163      32508 0.9264249 ## 5       163      32667 0.9264249 ## 6       163      32900 0.9264249 whichQuery(mtch) ##  [1]  163  320  420  433  493  496  497  571  682  685  686  805  806  809  810 ## [16]  819  829  983 1095 1454 1457 1706 1830 1834 1839 1906 2047 2048 2050 sum(is.na(precursorMz(mbank))) ## [1] 24498 spectraVariables(mtch) ##  [1] \"msLevel\"                        \"rtime\"                          ##  [3] \"acquisitionNum\"                 \"scanIndex\"                      ##  [5] \"dataStorage\"                    \"dataOrigin\"                     ##  [7] \"centroided\"                     \"smoothed\"                       ##  [9] \"polarity\"                       \"precScanNum\"                    ## [11] \"precursorMz\"                    \"precursorIntensity\"             ## [13] \"precursorCharge\"                \"collisionEnergy\"                ## [15] \"isolationWindowLowerMz\"         \"isolationWindowTargetMz\"        ## [17] \"isolationWindowUpperMz\"         \"peaksCount\"                     ## [19] \"totIonCurrent\"                  \"basePeakMZ\"                     ## [21] \"basePeakIntensity\"              \"ionisationEnergy\"               ## [23] \"lowMZ\"                          \"highMZ\"                         ## [25] \"mergedScan\"                     \"mergedResultScanNum\"            ## [27] \"mergedResultStartScanNum\"       \"mergedResultEndScanNum\"         ## [29] \"injectionTime\"                  \"filterString\"                   ## [31] \"spectrumId\"                     \"ionMobilityDriftTime\"           ## [33] \"scanWindowLowerLimit\"           \"scanWindowUpperLimit\"           ## [35] \"target_msLevel\"                 \"target_rtime\"                   ## [37] \"target_acquisitionNum\"          \"target_scanIndex\"               ## [39] \"target_dataStorage\"             \"target_dataOrigin\"              ## [41] \"target_centroided\"              \"target_smoothed\"                ## [43] \"target_polarity\"                \"target_precScanNum\"             ## [45] \"target_precursorMz\"             \"target_precursorIntensity\"      ## [47] \"target_precursorCharge\"         \"target_collisionEnergy\"         ## [49] \"target_isolationWindowLowerMz\"  \"target_isolationWindowTargetMz\" ## [51] \"target_isolationWindowUpperMz\"  \"target_spectrum_id\"             ## [53] \"target_spectrum_name\"           \"target_date\"                    ## [55] \"target_authors\"                 \"target_license\"                 ## [57] \"target_copyright\"               \"target_publication\"             ## [59] \"target_splash\"                  \"target_compound_id\"             ## [61] \"target_adduct\"                  \"target_ionization\"              ## [63] \"target_ionization_voltage\"      \"target_fragmentation_mode\"      ## [65] \"target_collision_energy_text\"   \"target_instrument\"              ## [67] \"target_instrument_type\"         \"target_formula\"                 ## [69] \"target_exactmass\"               \"target_smiles\"                  ## [71] \"target_inchi\"                   \"target_inchikey\"                ## [73] \"target_cas\"                     \"target_pubchem\"                 ## [75] \"target_synonym\"                 \"target_precursor_mz_text\"       ## [77] \"target_compound_name\"           \"score\" spectraData(mtch, c(\"rtime\", \"precursorMz\", \"target_precursorMz\", \"score\")) ## DataFrame with 2500 rows and 4 columns ##          rtime precursorMz target_precursorMz     score ##      <numeric>   <numeric>          <numeric> <numeric> ## 1        7.216    137.9639                 NA        NA ## 2       13.146     56.9419                 NA        NA ## 3       13.556     89.9449                 NA        NA ## 4       23.085    207.0294                 NA        NA ## 5       27.385    121.0990                 NA        NA ## ...        ...         ...                ...       ... ## 2496   895.182    137.9850                 NA        NA ## 2497   895.472     56.0495                 NA        NA ## 2498   896.252    142.9611                 NA        NA ## 2499   896.662     53.0129                 NA        NA ## 2500   898.602     91.5022                 NA        NA mtch <- mtch[whichQuery(mtch)] spectraData(mtch, c(\"rtime\", \"precursorMz\", \"target_precursorMz\", \"score\")) ## DataFrame with 78 rows and 4 columns ##         rtime precursorMz target_precursorMz     score ##     <numeric>   <numeric>          <numeric> <numeric> ## 1     173.184     305.156            305.157  0.926425 ## 2     173.184     305.156            305.157  0.926425 ## 3     173.184     305.156            305.157  0.926425 ## 4     173.184     305.156            305.157  0.926425 ## 5     173.184     305.156            305.157  0.926425 ## ...       ...         ...                ...       ... ## 74    527.419     279.156            279.159  0.814331 ## 75    527.419     279.156            279.159  0.822396 ## 76    570.096     373.039            373.041  0.934031 ## 77    570.506     373.042            373.041  0.888829 ## 78    570.825     373.040            373.041  0.827892 pandoc.table(style = \"rmarkdown\",     as.data.frame(spectraData(mtch, c(\"rtime\", \"target_compound_name\",                                       \"score\"))))"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/Spectra-matching-with-MetaboAnnotation.html","id":"ms2-spectra-matching-in-an-xcms-workflow","dir":"Articles","previous_headings":"Overview","what":"MS2 spectra matching in an xcms workflow","title":"MS/MS Spectra Matching with the `MetaboAnnotation` Package","text":"LC-MS/MS-based untargeted metabolomics (small compound mass spectrometry experiments general) quantification compounds performed MS1 MS2 data used identification features. Quantification MS1 data requires chromatographic peak detection step can performed using functionality xcms package. load thus xcms package import full MS data using readMSData function. next perform chromatographic peak detection using centWave algorithm (see LC-MS/MS data analysis xcms vignette xcms package details chromatographic peak detection settings). total 99 chromatographic peaks identified. display first 6 . can now extract MS2 spectra chromatographic peak chromPeakSpectra function. function identifies MS2 spectra recorded instrument retention time within retention time precursor m/z within m/z boundaries chromatographic peak. setting return.type = \"Spectra\" ensure data returned newer Spectra format hence enabling simplified spectra matching functionality presented . Spectra variable peak_id contains identified chromatographic peak (.e. row name chromPeaks). next, like previous section, clean spectra removing peaks intensity 5% largest peak intensity per spectrum removing spectra single peak. addition scale also intensities within MS2 spectrum replacing intensities relative maximum peak intensity (see information). addition query spectra, also normalize MassBank spectra way. Next perform now spectra matching parameters previous section. , restrict MatchedSpectra query spectra matched. table lists compound names matching spectra chromatographic peaks. can also directly plot matching (query target) spectra using plotSpectraMirror function subsetting MatchedSpectra object query spectrum interest. plot third query spectrum matching target spectra.  Summarizing, chromPeakSpectra featureSpectra functions, xcms allows return MS data Spectra objects enables, shown simple example, perform MS2 spectra matching using Spectra well MetaboAnnotation packages hence simplifying MS/MS-based annotation LC-MS features xcms.","code":"library(xcms) pest_all <- readMSData(fl, mode = \"onDisk\") cwp <- CentWaveParam(snthresh = 5, noise = 100, ppm = 10,                      peakwidth = c(3, 30)) pest_all <- findChromPeaks(pest_all, param = cwp) head(chromPeaks(pest_all)) ##            mz    mzmin    mzmax      rt   rtmin   rtmax       into      intb ## CP01 142.9926 142.9921 142.9931 130.615 125.856 134.241  1113.8028  1106.229 ## CP02 221.0918 221.0906 221.0925 240.897 236.657 246.984   756.6935   744.779 ## CP03 220.0985 220.0978 220.0988 240.897 237.187 246.327  2060.5921  2052.549 ## CP04 219.0957 219.0950 219.0962 241.018 236.253 246.327 15172.6662 15133.811 ## CP05 153.0659 153.0655 153.0663 330.591 325.373 334.400  2148.7134  2141.943 ## CP06 235.1447 235.1441 235.1454 330.591 326.431 334.400  2836.2675  2829.627 ##           maxo  sn sample ## CP01  346.7006 102      1 ## CP02  212.5239  21      1 ## CP03  585.3036 151      1 ## CP04 4877.1162 367      1 ## CP05  784.9196 114      1 ## CP06 1006.9720 110      1 pest_ms2 <- chromPeakSpectra(pest_all, return.type = \"Spectra\") pest_ms2 ## MSn data (Spectra) with 158 spectra in a MsBackendMzR backend: ##            msLevel     rtime scanIndex ##          <integer> <numeric> <integer> ## F1.S1000         2   128.237      1000 ## F1.S1008         2   128.737      1008 ## F1.S1023         2   129.857      1023 ## F1.S1812         2   237.869      1812 ## F1.S1846         2   241.299      1846 ## ...            ...       ...       ... ## F1.S5115         2   575.255      5115 ## F1.S5272         2   596.584      5272 ## F1.S5236         2   592.424      5236 ## F1.S5266         2   596.054      5266 ## F1.S7344         2   873.714      7344 ##  ... 38 more variables/columns. ##  ## file(s): ## PestMix1_DDA.mzML pest_ms2$peak_id ##   [1] \"CP01\" \"CP01\" \"CP01\" \"CP04\" \"CP04\" \"CP05\" \"CP05\" \"CP06\" \"CP06\" \"CP08\" ##  [11] \"CP08\" \"CP11\" \"CP11\" \"CP12\" \"CP12\" \"CP13\" \"CP13\" \"CP13\" \"CP13\" \"CP14\" ##  [21] \"CP14\" \"CP14\" \"CP14\" \"CP18\" \"CP22\" \"CP22\" \"CP22\" \"CP22\" \"CP22\" \"CP25\" ##  [31] \"CP25\" \"CP25\" \"CP25\" \"CP25\" \"CP26\" \"CP26\" \"CP26\" \"CP26\" \"CP26\" \"CP26\" ##  [41] \"CP33\" \"CP33\" \"CP34\" \"CP34\" \"CP34\" \"CP34\" \"CP34\" \"CP35\" \"CP35\" \"CP35\" ##  [51] \"CP35\" \"CP35\" \"CP36\" \"CP41\" \"CP41\" \"CP41\" \"CP42\" \"CP42\" \"CP42\" \"CP42\" ##  [61] \"CP42\" \"CP44\" \"CP44\" \"CP46\" \"CP46\" \"CP46\" \"CP46\" \"CP47\" \"CP47\" \"CP47\" ##  [71] \"CP48\" \"CP48\" \"CP48\" \"CP50\" \"CP51\" \"CP51\" \"CP51\" \"CP52\" \"CP52\" \"CP52\" ##  [81] \"CP53\" \"CP53\" \"CP53\" \"CP53\" \"CP53\" \"CP57\" \"CP57\" \"CP57\" \"CP57\" \"CP57\" ##  [91] \"CP59\" \"CP59\" \"CP60\" \"CP60\" \"CP61\" \"CP61\" \"CP63\" \"CP63\" \"CP63\" \"CP63\" ## [101] \"CP64\" \"CP64\" \"CP64\" \"CP64\" \"CP64\" \"CP65\" \"CP66\" \"CP66\" \"CP66\" \"CP66\" ## [111] \"CP67\" \"CP67\" \"CP67\" \"CP69\" \"CP69\" \"CP69\" \"CP71\" \"CP71\" \"CP71\" \"CP71\" ## [121] \"CP72\" \"CP72\" \"CP72\" \"CP73\" \"CP81\" \"CP81\" \"CP81\" \"CP81\" \"CP82\" \"CP82\" ## [131] \"CP82\" \"CP85\" \"CP85\" \"CP88\" \"CP88\" \"CP89\" \"CP89\" \"CP89\" \"CP90\" \"CP90\" ## [141] \"CP90\" \"CP91\" \"CP91\" \"CP91\" \"CP93\" \"CP93\" \"CP93\" \"CP93\" \"CP93\" \"CP93\" ## [151] \"CP94\" \"CP94\" \"CP94\" \"CP94\" \"CP95\" \"CP98\" \"CP98\" \"CP99\" #' Remove peaks with an intensity below 5% pest_ms2 <- filterIntensity(pest_ms2, intensity = low_int)  #' Remove peaks with a single peak pest_ms2 <- pest_ms2[lengths(pest_ms2) > 1] #' Define a function to *normalize* the intensities norm_int <- function(x, ...) {     maxint <- max(x[, \"intensity\"], na.rm = TRUE)     x[, \"intensity\"] <- 100 * x[, \"intensity\"] / maxint     x } #' *Apply* the function to the data pest_ms2 <- addProcessing(pest_ms2, norm_int) mbank <- addProcessing(mbank, norm_int) pest_match <- matchSpectra(pest_ms2, mbank, param = prm) pest_match ## Object of class MatchedSpectra  ## Total number of matches: 31  ## Number of query objects: 155 (7 matched) ## Number of target objects: 86576 (19 matched) pest_match <- pest_match[whichQuery(pest_match)] pandoc.table(     style = \"rmarkdown\",     as.data.frame(spectraData(pest_match, c(\"peak_id\", \"rtime\",                                             \"target_compound_name\")))) plotSpectraMirror(pest_match[3])"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/Spectra-matching-with-MetaboAnnotation.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"MS/MS Spectra Matching with the `MetaboAnnotation` Package","text":"","code":"sessionInfo() ## R Under development (unstable) (2022-02-17 r81757) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ##  ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] xcms_3.17.3             MSnbase_2.21.5          mzR_2.29.3              ##  [4] Rcpp_1.0.8              Biobase_2.55.0          MetaboAnnotation_0.99.6 ##  [7] MsBackendMassbank_1.3.4 RMariaDB_1.2.1          pander_0.6.4            ## [10] Spectra_1.5.11          ProtGenerics_1.27.2     BiocParallel_1.29.12    ## [13] S4Vectors_0.33.10       BiocGenerics_0.41.2     BiocStyle_2.23.1        ##  ## loaded via a namespace (and not attached): ##  [1] colorspace_2.0-3            ellipsis_0.3.2              ##  [3] MetaboCoreUtils_1.3.7       rprojroot_2.0.2             ##  [5] XVector_0.35.0              GenomicRanges_1.47.6        ##  [7] fs_1.5.2                    clue_0.3-60                 ##  [9] affyio_1.65.0               bit64_4.0.5                 ## [11] fansi_1.0.2                 lubridate_1.8.0             ## [13] codetools_0.2-18            ncdf4_1.19                  ## [15] doParallel_1.0.17           cachem_1.0.6                ## [17] impute_1.69.0               robustbase_0.93-9           ## [19] knitr_1.37                  jsonlite_1.8.0              ## [21] cluster_2.1.2               vsn_3.63.0                  ## [23] BiocManager_1.30.16         compiler_4.2.0              ## [25] assertthat_0.2.1            Matrix_1.4-0                ## [27] fastmap_1.1.0               limma_3.51.5                ## [29] cli_3.2.0                   htmltools_0.5.2             ## [31] tools_4.2.0                 gtable_0.3.0                ## [33] glue_1.6.1                  GenomeInfoDbData_1.2.7      ## [35] affy_1.73.0                 RANN_2.6.1                  ## [37] dplyr_1.0.8                 MALDIquant_1.21             ## [39] jquerylib_0.1.4             pkgdown_2.0.2               ## [41] vctrs_0.3.8                 preprocessCore_1.57.0       ## [43] iterators_1.0.14            xfun_0.29                   ## [45] stringr_1.4.0               lifecycle_1.0.1             ## [47] XML_3.99-0.8                DEoptimR_1.0-10             ## [49] zlibbioc_1.41.0             MASS_7.3-55                 ## [51] scales_1.1.1                ragg_1.2.2                  ## [53] pcaMethods_1.87.0           hms_1.1.1                   ## [55] MatrixGenerics_1.7.0        parallel_4.2.0              ## [57] SummarizedExperiment_1.25.3 MassSpecWavelet_1.61.0      ## [59] RColorBrewer_1.1-2          yaml_2.3.5                  ## [61] memoise_2.0.1               ggplot2_3.3.5               ## [63] MsFeatures_1.3.0            sass_0.4.0                  ## [65] stringi_1.7.6               highr_0.9                   ## [67] desc_1.4.0                  foreach_1.5.2               ## [69] GenomeInfoDb_1.31.4         rlang_1.0.1                 ## [71] pkgconfig_2.0.3             systemfonts_1.0.4           ## [73] matrixStats_0.61.0          bitops_1.0-7                ## [75] mzID_1.33.0                 evaluate_0.15               ## [77] lattice_0.20-45             purrr_0.3.4                 ## [79] bit_4.0.4                   tidyselect_1.1.2            ## [81] plyr_1.8.6                  magrittr_2.0.2              ## [83] R6_2.5.1                    IRanges_2.29.1              ## [85] generics_0.1.2              DelayedArray_0.21.2         ## [87] DBI_1.1.2                   pillar_1.7.0                ## [89] MsCoreUtils_1.7.3           RCurl_1.98-1.6              ## [91] tibble_3.1.6                crayon_1.5.0                ## [93] utf8_1.2.2                  rmarkdown_2.11              ## [95] grid_4.2.0                  digest_0.6.29               ## [97] textshaping_0.3.6           munsell_0.5.0               ## [99] bslib_0.3.1"},{"path":[]},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"description","dir":"Articles","previous_headings":"Overview","what":"Description","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Mass spectrometry (MS) data key technology modern proteomics metabolomics experiments. Due continuous improvements MS instrumentation, generated data can easily become large. Also, additional resources MS data exist, spectra libraries databases, specific file formats database systems sometimes support manipulations original data. Learning experiences MSnbase Bioconductor package, Spectra package developed provide even flexible expandable infrastructure MS data R. package implements clear separation user interface code provide, store import MS data. latter defined MsBackend interface thus allows implementation data type, format storage-dependent backends. Backends can thus implemented specific file types data resources different ways represent MS data (e.g. memory -disk data representations described (Gatto, Gibb, Rainer 2020)). also supposed interchangeable hence allowing user switch backends without affecting analysis. enable processing also large MS data sets, data manipulations default directly applied data cached lazy evaluation queue allows analyses also read-data representations. (instructor-led live demo) workshop shows expandability new infrastructure enable seamless integration analysis MS data variety input formats illustrated simple comparison matching experimental MS2 spectra public spectral databases export data format commonly used exchange MS2 data.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"pre-requisites","dir":"Articles","previous_headings":"Overview","what":"Pre-requisites","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Basic familiarity R Bioconductor. Basic understanding Mass Spectrometry (MS) data.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"installation-and-participation","dir":"Articles","previous_headings":"Overview","what":"Installation and Participation","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Get docker image tutorial docker pull jorainer/spectra_tutorials:latest. Start docker using Enter http://localhost:8787 web browser log username rstudio password bioc. Open R-markdown file (vignettes/analyzing-MS-data--different-sources--Spectra.Rmd) RStudio server version web browser evaluate R code blocks. get source code: clone github repository, e.g. git clone https://github.com/jorainer/SpectraTutorials.","code":"docker run \\     -e PASSWORD=bioc \\     -p 8787:8787 \\     jorainer/spectra_tutorials:latest"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"rbioconductor-packages-used","dir":"Articles","previous_headings":"Overview","what":"R/Bioconductor packages used","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Spectra MsCoreUtils MsBackendMgf MsBackendMassbank CompoundDb","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"learning-goals","dir":"Articles","previous_headings":"Overview > Workshop goals and objectives","what":"Learning goals","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Understand import MS data R. Understand basic concept backends Spectra can used work MS data various sources.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"learning-objectives","dir":"Articles","previous_headings":"Overview > Workshop goals and objectives","what":"Learning objectives","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Import export MS data Spectra. Integrate MS data different resources MS data analysis workflow. Apply different data manipulations MS data represented Spectra object. Use Spectra perform spectra comparisons R.","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"lc-msms-in-a-nutshell","dir":"Articles","previous_headings":"Workshop","what":"LC-MS/MS in a nutshell","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Mass spectrometry (MS) instruments measure mass--charge ratios (m/z) abundances ions. resulting m/z intensity values stored/represented spectrum. compounds charged, need ionized first (e.g. electro spray ionization (ESI)). MS usually combined another separation technique, liquid chromatography (LC). adds another dimension data: retention time (rt). LC-MS data represented multiple spectra, spectrum retention time. LC-MS setup LC-MS measure features characterized m/z retention time - still don’t know molecule actually measured. Create addition fragment (MS/MS) spectra ions get information structure. CID-based fragmentation Commonly used method: collision induced dissociation (CID). collision chamber filled e.g. N2, ions get fragmented spectrum fragments recorded (Steckel Schlosser 2019). Comparing matching fragment spectra reference helps identifying compound.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"the-spectra-package","dir":"Articles","previous_headings":"Workshop","what":"The Spectra package","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Spectra package implements clear separation user interface code provide, store read mass spectrometry data. Thus, different data file format-specific backends can implemented directly plugged-without affecting way user access analyze data. represents extension -memory -disk data modes already available MSnbase package enabled either fast data processing analysis large data sets keeping limited amount data computer’s memory (Gatto, Gibb, Rainer 2020). Spectra: separation user functionality data representation workshop : import MS data mzML files, select MS2 spectra certain compound, compare match MS2 spectra reference MS2 spectra public database, annotate spectra export file MGF format.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"ms-data-import-and-handling","dir":"Articles","previous_headings":"Workshop","what":"MS data import and handling","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"import MS data mzML files provided within package. files contain MSn data mix 8 standard compounds (added either water pool human serum samples) measured HILIC-based LC-MS/MS setup. MS2 data generated data dependent acquisition using collision energy 20eV. data import representation experimental data use MsBackendMzR backend supports import (export) data common raw mass spectrometry file formats (.e. mzML, mzXML CDF). MS data now represented Spectra object, can thought data.frame rows individual spectra columns spectra variables (\"rtime\", .e. retention time). spectraVariables function lists available variables within Spectra object. spectra variable can accessed either via $ name using dedicated access function (preferred way). access retention times first spectra using either $rtime function rtime. Spectra object contains information total 1578 spectra length(unique(dataOrigin(sps_all))) mzML files. using MsBackendMzR backend, general information spectrum kept memory resulting low memory footprint. spectra’s m/z intensity values can accessed mz intensity functions. using MsBackendMzR backend, retrieved demand original data files time functions called. can also load full data memory changing backend MsBackendMzR MsBackendDataFrame. affect way use Spectra object : operations functions available, independently way data stored (.e. backend used). size Spectra object now larger, since full data loaded memory. subset Spectra objects, can use either [ one many available filter* functions (usually efficient [). subset sps_all arbitrary spectra simply using: workshop, next want identify experimental data MS2 spectra generated ion matches m/z [M+H]+ ion metabolite cystine (one standards added sample mix measured present experimental data). thus use filterPrecursorMzValues function subset data MS2 spectra matching m/z (accepting difference m/z 10 parts-per-million (ppm)). total 6 spectra matched target precursor m/z.","code":"library(Spectra)  #' Define the input files fls <- dir(system.file(\"mzML\", package = \"SpectraTutorials\"),            full.names = TRUE)  #' Import the data sps_all <- Spectra(fls, source = MsBackendMzR()) #' List all available spectra variables (attributes) spectraVariables(sps_all) ##  [1] \"msLevel\"                  \"rtime\"                    ##  [3] \"acquisitionNum\"           \"scanIndex\"                ##  [5] \"dataStorage\"              \"dataOrigin\"               ##  [7] \"centroided\"               \"smoothed\"                 ##  [9] \"polarity\"                 \"precScanNum\"              ## [11] \"precursorMz\"              \"precursorIntensity\"       ## [13] \"precursorCharge\"          \"collisionEnergy\"          ## [15] \"isolationWindowLowerMz\"   \"isolationWindowTargetMz\"  ## [17] \"isolationWindowUpperMz\"   \"peaksCount\"               ## [19] \"totIonCurrent\"            \"basePeakMZ\"               ## [21] \"basePeakIntensity\"        \"ionisationEnergy\"         ## [23] \"lowMZ\"                    \"highMZ\"                   ## [25] \"mergedScan\"               \"mergedResultScanNum\"      ## [27] \"mergedResultStartScanNum\" \"mergedResultEndScanNum\"   ## [29] \"injectionTime\"            \"filterString\"             ## [31] \"spectrumId\"               \"ionMobilityDriftTime\"     ## [33] \"scanWindowLowerLimit\"     \"scanWindowUpperLimit\" #' Access the spectras' retention time head(sps_all$rtime) ## [1] 0.273 0.570 0.873 1.183 1.491 1.798 head(rtime(sps_all)) ## [1] 0.273 0.570 0.873 1.183 1.491 1.798 print(object.size(sps_all), units = \"MB\") ## 0.4 Mb mz(sps_all) ## NumericList of length 1578 ## [[1]] 50.2264681118888 52.9758613330164 ... 998.412321909748 999.815483842029 ## [[2]] 50.0188439310345 51.0188982589394 ... 994.093212059943 998.65669267328 ## [[3]] 50.0188439310345 51.0260087879784 ... 999.549654921888 999.904649454908 ## [[4]] 50.0347997547605 51.0271913631291 ... 984.467433193755 998.839380503321 ## [[5]] 50.1615393614339 51.0280734441081 ... 996.599267645346 999.81102566575 ## [[6]] 50.0158524973623 50.2809808965161 ... 992.93057113729 999.650537939432 ## [[7]] 50.0178467765376 51.02704020796 ... 999.217711368357 999.757528325686 ## [[8]] 50.0158524973623 51.0257255950236 ... 993.780890433629 999.583671855333 ## [[9]] 50.0158524973623 50.9727348052523 ... 999.508971233846 999.663911424618 ## [[10]] 50.0158524973623 50.0264589058649 ... 997.312177169353 999.672827131107 ## ... ## <1568 more elements> #' Change backend to a MsBackendDataFrame: load data into memory sps_all <- setBackend(sps_all, MsBackendDataFrame()) print(object.size(sps_all), units = \"MB\") ## 16.5 Mb sps_all[c(4, 2, 5)] ## MSn data (Spectra) with 3 spectra in a MsBackendDataFrame backend: ##     msLevel     rtime scanIndex ##   <integer> <numeric> <integer> ## 1         1     1.183         4 ## 2         1     0.570         2 ## 3         1     1.491         5 ##  ... 33 more variables/columns. ## Processing: ##  Switch backend from MsBackendMzR to MsBackendDataFrame [Wed Feb 23 13:55:05 2022] #' Define the m/z ratio for an ion of cystine mz <- 241.0311  #' Subset the dataset to MS2 spectra matching the m/z sps <- filterPrecursorMzValues(sps_all, mz = mz, ppm = 10) sps ## MSn data (Spectra) with 6 spectra in a MsBackendDataFrame backend: ##     msLevel     rtime scanIndex ##   <integer> <numeric> <integer> ## 1         2   209.936       673 ## 2         2   220.072       714 ## 3         2   231.604       734 ## 4         2   215.089       761 ## 5         2   225.739       781 ## 6         2   240.020       804 ##  ... 33 more variables/columns. ## Processing: ##  Switch backend from MsBackendMzR to MsBackendDataFrame [Wed Feb 23 13:55:05 2022] ##  Filter: select spectra with precursor m/z matching 241.0311 [Wed Feb 23 13:55:05 2022]"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"data-processing-and-manipulation","dir":"Articles","previous_headings":"Workshop","what":"Data processing and manipulation","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"plotSpectra function can used visualize spectra. plot first spectrum data subset.  raw MS2 spectrum contains many low intensity peaks, likely representing noise. Thus next filter spectra removing peaks intensity smaller 5% maximum intensity spectrum (.e. base peak intensity). end define function takes intensity values spectrum input returns logical value whether peak retained (TRUE) (FALSE). function passed filterIntensity function perform actual filtering spectra. filtering, spectra cleaner:  addition normalize spectrum replacing absolute intensity values values relative spectrum’s maximum intensity (set 100). Also operation define function takes peak matrix input returns matrix dimensions. peak matrix two-column matrix m/z (first column) intensity values (second column) representing MS data spectrum. function passed parameter FUN addProcessing function allows apply user-defined function peak matrix spectrum Spectra object. function Spectra thus provides powerful framework apply user-defined data manipulation operation MS data. show effect normalization extract intensities first spectrum: intensity values now 0 100.","code":"#' Plot the first spectrum plotSpectra(sps[1]) #' Define a filtering function low_int <- function(x, ...) {     x > max(x, na.rm = TRUE) * 0.05 } #' Apply the function to filter the spectra sps <- filterIntensity(sps, intensity = low_int) #' Plot the first spectrum after filtering plotSpectra(sps[1]) #' Define a function to *normalize* the intensities norm_int <- function(x, ...) {     maxint <- max(x[, \"intensity\"], na.rm = TRUE)     x[, \"intensity\"] <- 100 * x[, \"intensity\"] / maxint     x } #' *Apply* the function to the data sps <- addProcessing(sps, norm_int) #' Get the intensities after normalization intensity(sps)[[1]] ## [1]  13.439402  93.631648  49.287979 100.000000   9.422415   6.581111  12.969807 ## [8]  54.633224"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"spectrum-data-comparison","dir":"Articles","previous_headings":"Workshop","what":"Spectrum data comparison","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"next perform pairwise comparison subsetted spectra using dot product similarity measure. Prior actual similarity calculation, peaks individual spectra matched (.e. determined peak one spectrum correspond spectrum based mass--charge ratios). specify ppm = 20 peaks difference m/z smaller 20ppm considered matching. pairwise spectra similarities represented heatmap (note RStudio docker might crash pheatmap call - avoid add filename = \"hm.pdf\" heatmap call).  similarity selected experimental MS2 spectra high (fact 0.88) suggesting representing fragment spectra compound.","code":"#' Pairwise comparison of all spectra cormat <- compareSpectra(sps, ppm = 20) cormat ##           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] ## [1,] 1.0000000 0.9717669 0.8907129 0.9721095 0.8795912 0.8818719 ## [2,] 0.9717669 1.0000000 0.9992127 0.9964783 0.9525726 0.9486682 ## [3,] 0.8907129 0.9992127 1.0000000 0.9947650 0.9518138 0.9478201 ## [4,] 0.9721095 0.9964783 0.9947650 1.0000000 0.9543584 0.9494561 ## [5,] 0.8795912 0.9525726 0.9518138 0.9543584 1.0000000 0.9994800 ## [6,] 0.8818719 0.9486682 0.9478201 0.9494561 0.9994800 1.0000000 library(pheatmap) hm <- pheatmap(cormat, breaks = seq(0, 1, length.out = 101))"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"comparing-spectra-against-massbank","dir":"Articles","previous_headings":"Workshop","what":"Comparing spectra against MassBank","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Although precursor m/z spectra matches m/z cystine, can still exclude represent fragmentations ions different compounds (precursor m/z cystine). Matching experimental spectra public spectral library can used first step identification process. Several (public) spectral libraries small molecules available, : MassBank MassBank North America MoNa Human Metabolom Database HMDB GNPS … databases MsBackend interfaces already implemented allowing inclusion data directly R-based analysis workflows. Access MassBank data example possible r BiocStyle::Biocpkg(\"MsBackendMassbank\") package. package provides MsBackendMassbank import/export MassBank files well MsBackendMassbankSql backend directly interfaces MassBank MySQL database. load MsBackendMassbank package connect local installation MassBank MySQL database (release 2021.03 provided within docker image tutorial). can now initialize Spectra object MsBackendMassbankSql backend access data MassBank. Alternatively, MySQL database system available tutorial can run within docker, SQLite database version MassBank data (format required MsBackendMassbankSql available . downloading database MassbankSql-2021-03.db current R workspace, resource can loaded : Spectra object mbank represents now MS data MassBank database total length(mbank) spectra. fact, mbank object contain MS data, primary keys spectra MassBank database. Hence, also relatively low memory footprint. operation Spectra object backend load requested data database demand. Calling intensity Spectra object example retrieve intensity values spectra database. can see, also MassBank provides absolute intensities spectrum. data scale, however like scale values 0 100, just like experimental data. thus apply data processing operation also MassBank Spectra object. worked, although (obvious reasons) allowed change m/z intensity values within MassBank database. possible? works, data manipulation operation Spectra object cached within object’s lazy evaluation queue operation applied m/z intensity values --fly whenever data requested (.e. whenever mz intensity called ). side effect, also allows undo certain data operations simply calling reset Spectra object. next want compare experimental spectra spectra MassBank. Instead comparing 86576 available spectra, first filter MassBank database spectra precursor m/z matching one [M+H]+ ion cystine. Note , alternative filterPrecursorMzValues used , also use containsMz function screen spectra containing actual peak matching precursor m/z. left us 12 spectra calculate similarity experimental spectra using compareSpectra function. result got (normalized dot product) similarity score tested MassBank spectrum (rows) experimental spectrum (columns).  get high similarity scores, also lower ones. next determine best matching pair comparisons. best_match variable contains now index best matching MassBank experimental spectrum. visualize two using mirror plot showing upper panel MS2 spectrum MassBank lower panel best matching experimental spectrum. Matching peaks highlighted blue color. Plotting functions Spectra highly customizable example add m/z individual peak annotation intensity peak higher 5.  comparison plot also two spectra low similarity score.  Since identify MassBank spectrum high similarity experimental spectra also like know compound spectrum actually represents. Spectra objects generally flexible can arbitrarily many additional annotation fields (.e. spectra variables) spectrum. Thus, use spectraVariables function list variables available MassBank Spectra object. fact, addition spectra specific information like instrument measured ionization voltage used, get also information originating compound name (\"compound_name\"), chemical formula (\"formula\") INChI key (\"inchikey\"). thus next subset mbank_sub best matching spectrum display associated compound name. Indeed, experimental cystine spectrum matches (one) cystine spectrum MassBank. next add name chemical formula spectrum experimental spectra. also set collision energy 20eV assign ion/adduct cystine reference spectrum created. Note: convenient spectra matching functionality designed less experienced R users available MetaboAnnotation package. second tutorial available within github repository/R package additional tutorials can found MetaboAnnotationTutorials repository/R package.","code":"library(RMariaDB) library(MsBackendMassbank)  #' Connect to the MassBank MySQL database con <- dbConnect(MariaDB(), user = \"massbank\", dbname = \"MassBank\",                  host = \"localhost\", pass = \"massbank\") #' Access the spectra data in MassBank mbank <- Spectra(con, source = MsBackendMassbankSql()) mbank ## MSn data (Spectra) with 86576 spectra in a MsBackendMassbankSql backend: ##         msLevel precursorMz  polarity ##       <integer>   <numeric> <integer> ## 1             2         506         0 ## 2            NA          NA         1 ## 3            NA          NA         0 ## 4            NA          NA         1 ## 5            NA          NA         0 ## ...         ...         ...       ... ## 86572         2     449.380         1 ## 86573         2     426.022         0 ## 86574         2     131.060         0 ## 86575         2     183.170         1 ## 86576         2     358.270         0 ##  ... 42 more variables/columns. ##  Use  'spectraVariables' to list all of them. ## Alternative to the MySQL server - assuming the SQLite database was ## stored to the R working directory. library(RSQLite) con <- dbConnect(SQLite(), \"MassbankSql-2021-03.db\") mbank <- Spectra(con, source = MsBackendMassbankSql()) print(object.size(mbank), units = \"MB\") ## 6.6 Mb #' Get intensity values for the first spectrum intensity(mbank[1]) ## NumericList of length 1 ## [[1]] 0.980184 938.145447 56.718353 847.169678 ... 2.051622 812.386597 1.093564 #' *Normalize* intensities for all MassBank spectra mbank <- addProcessing(mbank, norm_int) intensity(mbank[1]) ## NumericList of length 1 ## [[1]] 0.00409025035453989 3.91482593798892 ... 0.00456337844599795 #' Filter MassBank for spectra of precursor ion mbank_sub <- filterPrecursorMzValues(mbank, mz = mz, ppm = 10) mbank_sub ## MSn data (Spectra) with 12 spectra in a MsBackendMassbankSql backend: ##       msLevel precursorMz  polarity ##     <integer>   <numeric> <integer> ## 1           2     241.031         1 ## 2           2     241.031         1 ## 3           2     241.031         1 ## 4           2     241.031         1 ## 5           2     241.031         1 ## ...       ...         ...       ... ## 8           2     241.031         1 ## 9           2     241.031         1 ## 10          2     241.031         1 ## 11          2     241.031         1 ## 12          2     241.031         1 ##  ... 42 more variables/columns. ##  Use  'spectraVariables' to list all of them. ## Lazy evaluation queue: 1 processing step(s) ## Processing: ##  Filter: select spectra with precursor m/z matching 241.0311 [Wed Feb 23 13:55:10 2022] #' Compare MassBank subset to experimental spectra res <- compareSpectra(mbank_sub, sps, ppm = 20) res ##               [,1]       [,2]        [,3]        [,4]        [,5]        [,6] ## RP014401 0.2026317 0.18071444 0.180198970 0.159611261 0.178432055 0.187159472 ## RP014402 0.3343503 0.29331600 0.289277897 0.306782584 0.360811559 0.362983456 ## RP014403 0.0246586 0.02144096 0.005165072 0.005668103 0.005392068 0.005564441 ## CE000600 0.9021127 0.88638673 0.886268770 0.866622989 0.879227845 0.884905386 ## CE000598 0.9069832 0.86557977 0.854177851 0.876050308 0.910186361 0.870563436 ## CE000602 0.7714246 0.75079464 0.733570598 0.777097524 0.776174404 0.720059795 ## CE000595 0.4711052 0.43073883 0.440694894 0.438244787 0.501664547 0.505248228 ## CE000599 0.5101048 0.53045776 0.537988018 0.473824102 0.491324937 0.501360573 ## CE000596 0.7358534 0.74158396 0.748032016 0.695780398 0.718522961 0.727849493 ## CE000597 0.2843629 0.30699105 0.315713004 0.258086379 0.278344659 0.286485423 ## CE000603 0.6267950 0.60792849 0.622025989 0.581961642 0.646976175 0.655418467 ## CE000601 0.6085564 0.56699213 0.545861294 0.604958829 0.605503692 0.552365660 pheatmap(res) best_match <- which(res == max(res), arr.ind = TRUE) best_match ##          row col ## CE000598   5   5 #' Specifying a function to draw peak labels label_fun <- function(x) {     ints <- unlist(intensity(x))     mzs <- format(unlist(mz(x)), digits = 4)     mzs[ints < 5] <- \"\"     mzs } plotSpectraMirror(mbank_sub[best_match[1]], sps[best_match[2]],                   ppm = 20, labels = label_fun, labelPos = 2,                   labelOffset = 0.2, labelSrt = -30) grid() plotSpectraMirror(mbank_sub[1], sps[3],                   ppm = 20, labels = label_fun, labelPos = 2,                   labelOffset = 0.2, labelSrt = -30) grid() #' What variables are available in MassBank spectraVariables(mbank_sub) ##  [1] \"msLevel\"                 \"rtime\"                   ##  [3] \"acquisitionNum\"          \"scanIndex\"               ##  [5] \"dataStorage\"             \"dataOrigin\"              ##  [7] \"centroided\"              \"smoothed\"                ##  [9] \"polarity\"                \"precScanNum\"             ## [11] \"precursorMz\"             \"precursorIntensity\"      ## [13] \"precursorCharge\"         \"collisionEnergy\"         ## [15] \"isolationWindowLowerMz\"  \"isolationWindowTargetMz\" ## [17] \"isolationWindowUpperMz\"  \"spectrum_id\"             ## [19] \"spectrum_name\"           \"date\"                    ## [21] \"authors\"                 \"license\"                 ## [23] \"copyright\"               \"publication\"             ## [25] \"splash\"                  \"compound_id\"             ## [27] \"adduct\"                  \"ionization\"              ## [29] \"ionization_voltage\"      \"fragmentation_mode\"      ## [31] \"collision_energy_text\"   \"instrument\"              ## [33] \"instrument_type\"         \"formula\"                 ## [35] \"exactmass\"               \"smiles\"                  ## [37] \"inchi\"                   \"inchikey\"                ## [39] \"cas\"                     \"pubchem\"                 ## [41] \"synonym\"                 \"precursor_mz_text\"       ## [43] \"compound_name\" mbank_best_match <- mbank_sub[best_match[1]] mbank_best_match$compound_name ## [1] \"Cystine\" #' Add annotations to the experimental spectra sps$name <- mbank_best_match$compound_name sps$formula <- mbank_best_match$formula sps$adduct <- mbank_best_match$adduct sps$collisionEnergy <- 20"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"data-export","dir":"Articles","previous_headings":"Workshop","what":"Data export","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"last want export spectra file MGF format. use MsBackendMgf package provides MsBackendMgf backend adds support MGF file import/export Spectra objects. Data Spectra objects can generally exported export function. format data exported depends specified MsBackend class. using instance MsBackendMgf define export data file MGF format.","code":"library(MsBackendMgf)  #' Export the spectra to a MGF file export(sps, backend = MsBackendMgf(), file = \"Cystine_ce20.mgf\")"},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"comparing-spectra-against-hmdb","dir":"Articles","previous_headings":"Workshop","what":"Comparing spectra against HMDB","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"addition MsBackendMassbank, provides access MassBank data, also MsBackendHmdb package supporting spectral data public Human Metabolome Database (HMDB). package however yet provide direct access HMDB database , MsBackendHmdbXml backend, allows import MS2 spectra files HMDB format. provided HMDB individual xml files custom file format bundled (can hence downloaded) single archive. alternative, also possible create portable annotation resources using CompoundDb package. packages allows example create annotation databases MoNA, MassBank HMDB. CompDb database containing compound annotations along (experimental) MS2 spectra provided data release MetaboAnnotationTutorials repository. download SQLite database temporary file. can now load annotation resource using CompDb function CompoundDb package: can now create Spectra object get access MS2 spectra within package: now Spectra object containing MS2 spectra HMDB along compound annotations. spectra variables (including compound annotations) available spectrum : Also , want filter data resource first spectra matching precursor m/z. Unfortunately, HMDB provided spectra’s precursor m/z hence need used containsMz function find spectra containing peak m/z matching m/z ion interest. addition, need use rather large tolerance value (defines maximal acceptable absolute difference m/z values) since experimental spectra HMDB seem recorded well calibrated instrument. total 3904 spectra contain peak required m/z (+/- 0.2 Dalton) can proceed calculate spectral similarities experimental spectra. highest similarity spectra spectra HMDB r max(res). compare two best matching spectra mirror plot, upper panel showing experimental spectrum lower panel best matching MS2 spectrum HMDB.  experimental spectrum seems nicely match reference MS2 HMDB. extract compound identifier best matching HMDB spectrum (stored spectra variable called \"compound_id\") name compound fact, matching spectrum HMDB experimental spectrum L-Cystine.","code":"#' Download the CompDb database using curl library(curl) dbname <- \"CompDb.Hsapiens.HMDB.5.0.sqlite\" db_file <- file.path(tempdir(), dbname) curl_download(     paste0(\"https://github.com/jorainer/MetaboAnnotationTutorials/\",            \"releases/download/2021-11-02/\", dbname),     destfile = db_file) library(CompoundDb) #' Load a CompDb database with compound annotation from HMDB cdb <- CompDb(db_file) cdb ## class: CompDb  ##  data source: HMDB  ##  version: 5.0  ##  organism: Hsapiens  ##  compound count: 217776  ##  MS/MS spectra count: 64920 hmdb <- Spectra(cdb) hmdb ## MSn data (Spectra) with 64920 spectra in a MsBackendCompDb backend: ##         msLevel precursorMz  polarity ##       <integer>   <numeric> <integer> ## 1            NA          NA         1 ## 2            NA          NA         1 ## 3            NA          NA         1 ## 4            NA          NA         1 ## 5            NA          NA         1 ## ...         ...         ...       ... ## 64916        NA          NA         0 ## 64917        NA          NA         0 ## 64918        NA          NA         0 ## 64919        NA          NA         0 ## 64920        NA          NA         1 ##  ... 32 more variables/columns. ##  Use  'spectraVariables' to list all of them. ##  data source: HMDB  ##  version: 5.0  ##  organism: Hsapiens spectraVariables(hmdb) ##  [1] \"msLevel\"                 \"rtime\"                   ##  [3] \"acquisitionNum\"          \"scanIndex\"               ##  [5] \"dataStorage\"             \"dataOrigin\"              ##  [7] \"centroided\"              \"smoothed\"                ##  [9] \"polarity\"                \"precScanNum\"             ## [11] \"precursorMz\"             \"precursorIntensity\"      ## [13] \"precursorCharge\"         \"collisionEnergy\"         ## [15] \"isolationWindowLowerMz\"  \"isolationWindowTargetMz\" ## [17] \"isolationWindowUpperMz\"  \"compound_id\"             ## [19] \"name\"                    \"inchi\"                   ## [21] \"inchikey\"                \"formula\"                 ## [23] \"exactmass\"               \"smiles\"                  ## [25] \"original_spectrum_id\"    \"predicted\"               ## [27] \"splash\"                  \"instrument_type\"         ## [29] \"instrument\"              \"spectrum_id\"             ## [31] \"msms_mz_range_min\"       \"msms_mz_range_max\"       ## [33] \"synonym\" #' Identify spectra containing a peak matching cystine m/z has_mz <- containsMz(hmdb, mz = mz, tolerance = 0.2) #' Subset HMDB hmdb_sub <- hmdb[has_mz]  #' Compare HMDB against experimental spectra res <- compareSpectra(hmdb_sub, sps, tolerance = 0.2) best_match <- which(res == max(res), arr.ind = TRUE) ## Specifying a function to draw peak labels label_fun <- function(x) {     format(unlist(mz(x)), digits = 4) } plotSpectraMirror(hmdb_sub[best_match[1]], sps[best_match[2]], tolerance = 0.2,                   labels = label_fun, labelPos = 2, labelOffset = 0.2,                   labelSrt = -30) grid() hmdb_sub[best_match[1]]$compound_id ## [1] \"HMDB0000192\" hmdb_sub[best_match[1]]$name ## [1] \"L-Cystine\""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"short-summary","dir":"Articles","previous_headings":"","what":"Short summary","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"Independence data analysis data storage functionality allows easily add support additional data types data handling/storage modes. Caching data operations applying --fly allow data manipulations regardless data stored.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"simple use case matching experimental MS2 spectra public database illustrated short tutorial flexibility expandability Spectra package enables seamless integration mass spectrometry data different sources. possible clear separation user functionality (Spectra object) representation data (MsBackend object). Backends MsBackendMgf, MsBackendMassbank MsBackendHmdbXml provide support additional data formats data sources, others, due much lower memory footprint (MsBackendMzR, MsBackendHdf5Peaks), enable analysis also large data sets. importantly however, backends interchangeable affect way users can handle analyze MS data Spectra package. Also, caching data operations within Spectra object applying upon data requests, data operations can applied data resource regardless data stored, even data read-.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/articles/analyzing-MS-data-from-different-sources-with-Spectra.html","id":"what-else","dir":"Articles","previous_headings":"","what":"What else?","title":"Seamless Integration of Mass Spectrometry Data from Different Sources with the `Spectra` Package","text":"MetaboAnnotation (Andrea Vicini, Michael Witting) provide simple functions matching spectra m/z retention time data (Rainer et al. 2022). MsExperiment represent whole MS experiments (incl. Spectra, sample annotation, data quantitation, annotation files etc). msQC (Thomas Naake): QC measures MS data. MsBackendMsp (Steffen Neumann): backend files MSP format. MsBackendSql (Chong Tang): SQL-based backend large data sets. MsqlBackend: alternative SQL-backed backend optimized MySQL databases. ...","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Rainer. Author, maintainer. Michael Witting. Author. Laurent Gatto. Author. Sebastian Gibb. Author.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rainer J, Witting M, Gatto L, Gibb S (2022). SpectraTutorials: Mass Spectrometry Data Analysis Spectra. R package version 0.6.2, https://jorainer.github.io/SpectraTutorials/.","code":"@Manual{,   title = {SpectraTutorials: Mass Spectrometry Data Analysis with Spectra},   author = {Johannes Rainer and Michael Witting and Laurent Gatto and Sebastian Gibb},   year = {2022},   note = {R package version 0.6.2},   url = {https://jorainer.github.io/SpectraTutorials/}, }"},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"mass-spectrometry-data-analysis-with-spectra","dir":"","previous_headings":"","what":"Mass Spectrometry Data Analysis with Spectra","title":"Mass Spectrometry Data Analysis with Spectra","text":"Tutorials workshops use Spectra Bioconductor package analyze mass spectrometry (MS) data.","code":""},{"path":[]},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"short-description","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources","what":"Short description","title":"Mass Spectrometry Data Analysis with Spectra","text":"workshop use Spectra : import MS data mzML files, select MS2 spectra certain compound, compare match MS2 spectra reference MS2 spectra public database, annotate spectra export file MGF format.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"description","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources","what":"Description","title":"Mass Spectrometry Data Analysis with Spectra","text":"(instructor-led live demo) workshop explains Spectra package shows new infrastructure can used represent analyze Mass Spectrometry (MS) data. use different data type format specific backends guarantees easy expandability infrastructure. illustrated tutorial simple use case, MS/MS (.k.. MS2) spectra, measured MS instrument, compared matched public spectral database containing public domain reference MS2 spectra. video recording workshop BioC2021 conference available . video recording workshop EuroBioc2020 conference available .","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"learning-goals","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources > Workshop goals and objectives","what":"Learning goals","title":"Mass Spectrometry Data Analysis with Spectra","text":"Understand import MS data R. Understand basic concept different backends can used Spectra work MS data various sources.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"learning-objectives","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources > Workshop goals and objectives","what":"Learning objectives","title":"Mass Spectrometry Data Analysis with Spectra","text":"Import export MS data Spectra. Integrate MS data different resources MS data analysis workflow. Apply different data manipulations MS data represented Spectra object. Use Spectra perform spectra comparisons R.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"pre-requisites","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources","what":"Pre-requisites","title":"Mass Spectrometry Data Analysis with Spectra","text":"Basic familiarity R Bioconductor. Basic understanding Mass Spectrometry (MS) data.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"installation-and-participation","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources","what":"Installation and participation","title":"Mass Spectrometry Data Analysis with Spectra","text":"Get docker image tutorial docker pull jorainer/spectra_tutorials:latest. Start docker using Enter http://localhost:8787 web browser log username rstudio password bioc. Open R-markdown file (vignettes/analyzing-MS-data--different-sources--Spectra.Rmd) RStudio server version web browser evaluate R code blocks. get source code: clone github repository, e.g. git clone https://github.com/jorainer/SpectraTutorials. Alternatively, SQLite database containing required data MassBank available . can used local MySQL database server docker available (respective code also shown tutorial).","code":"docker run \\     -e PASSWORD=bioc \\     -p 8787:8787 \\     jorainer/spectra_tutorials:latest"},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"manual-setup","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources > Installation and participation","what":"Manual setup","title":"Mass Spectrometry Data Analysis with Spectra","text":"advanced users also possible manually install resources required tutorial. addition R version >= 4, specifically examples involving MassBank database, running MySQL/MariaDB server also required. required R packages can installed code : MySQL database dump MassBank database can downloaded official github page. database named MassBank created local MySQL/MariaDB server. downloaded .sql.gz needs unzipped can installed mysql MassBank < *.sql. source code tutorials package can downloaded : open R-markdown (Rmd) files one tutorials (located within vignettes folder editor choice (e.g. RStudio, emacs, vim, …) evaluate R-code tutorial interactively.","code":"Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=\"true\") install.packages(c(\"devtools\", \"rmarkdown\", \"BiocManager\")) BiocManager::install(c(\"BiocStyle\",                        \"MsCoreUtils\",                        \"Spectra\",                        \"pheatmap\")) devtools::install_github(\"RforMassSpectrometry/CompoundDb\") devtools::install_github(\"RforMassSpectrometry/MsBackendMgf\") devtools::install_github(\"michaelwitting/MsBackendMassbank\") devtools::install_github(\"jorainer/SpectraTutorials\") git clone https://github.com/jorainer/SpectraTutorials"},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"rbioconductor-packages-used","dir":"","previous_headings":"Seamless Integration of Mass Spectrometry Data from Different Sources","what":"R/Bioconductor packages used","title":"Mass Spectrometry Data Analysis with Spectra","text":"Spectra MsCoreUtils MsBackendMgf MsBackendMassbank CompoundDb","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/index.html","id":"msms-spectra-matching-with-the-metaboannotation-package","dir":"","previous_headings":"","what":"MS/MS Spectra Matching with the MetaboAnnotation Package","title":"Mass Spectrometry Data Analysis with Spectra","text":"Spectra package provides functionality required annotation identification workflows untargeted LC-MS/MS data, , flexible customizable, might cumbersome beginners analysts accustomed R. fill gap developed MetaboAnnotation package builds upon Spectra provides functions annotation LC-MS LC-MS/MS data sets tailored towards less experienced R user. tutorial shows MetaboAnnotatio can used R-based LC-MS/MS annotation workflows. Note also additional tutorial MetaboAnnotation, CompoundDb MetaboCoreUtils packages available: MetaboAnnotationTutorials.","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-6","dir":"Changelog","previous_headings":"","what":"Version 0.6.2","title":"Version 0.6","text":"Add citation.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-6-1","dir":"Changelog","previous_headings":"","what":"Version 0.6.1","title":"Version 0.6","text":"Adapt changes Spectra >= 1.5.8: export spectraVariableMapping method. Adapt changes CompoundDb >= 0.9.6: \"target_name\" available spectra variable Spectra objects returned CompDb database. Adapt changes MetaboAnnotation >= 0.99.4: also ppm error reported matchMz.","code":""},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-6-2","dir":"Changelog","previous_headings":"","what":"Version 0.6.0","title":"Version 0.6","text":"Remove Spectra object data HMDB. Use CompDb database HMDB annotations.","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-5","dir":"Changelog","previous_headings":"","what":"Version 0.5.0","title":"Version 0.5","text":"Add additional vignette describing spectra matching MetaboAnnotation package integration xcms analysis workflow.","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-4","dir":"Changelog","previous_headings":"","what":"Version 0.4.0","title":"Version 0.4","text":"Version used BioC2021 conference. Use MassBank release 2021.03. Restructure document simplify analysis (reduce mzML files 20eV collision energy).","code":""},{"path":[]},{"path":"https://jorainer.github.io/SpectraTutorials/news/index.html","id":"version-0-3","dir":"Changelog","previous_headings":"","what":"Version 0.3.2","title":"Version 0.3","text":"Use MassBank release 2021.02 add expand descriptive text.","code":""}]
